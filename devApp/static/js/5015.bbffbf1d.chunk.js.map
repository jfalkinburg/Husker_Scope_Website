{"version":3,"file":"static/js/5015.bbffbf1d.chunk.js","mappings":"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","sources":["../node_modules/@capacitor-community/bluetooth-le/src/web.ts","../node_modules/@capacitor-community/bluetooth-le/src/timeout.ts"],"sourcesContent":["import { WebPlugin } from '@capacitor/core';\n\nimport { hexStringToDataView, mapToObject, webUUIDToString } from './conversion';\nimport type {\n  BleCharacteristic,\n  BleCharacteristicProperties,\n  BleDescriptor,\n  BleService,\n  TimeoutOptions,\n  BleDevice,\n  BleServices,\n  BluetoothLePlugin,\n  BooleanResult,\n  DeviceIdOptions,\n  GetConnectedDevicesOptions,\n  GetDevicesOptions,\n  GetDevicesResult,\n  ReadDescriptorOptions,\n  ReadOptions,\n  ReadResult,\n  ReadRssiResult,\n  RequestBleDeviceOptions,\n  ScanResultInternal,\n  WriteOptions,\n  WriteDescriptorOptions,\n  GetMtuResult,\n  RequestConnectionPriorityOptions,\n} from './definitions';\nimport { runWithTimeout } from './timeout';\n\nexport class BluetoothLeWeb extends WebPlugin implements BluetoothLePlugin {\n  private deviceMap = new Map<string, BluetoothDevice>();\n  private discoveredDevices = new Map<string, boolean>();\n  private scan: BluetoothLEScan | null = null;\n  private requestBleDeviceOptions: RequestBleDeviceOptions | undefined;\n  private DEFAULT_CONNECTION_TIMEOUT = 10000;\n\n  async initialize(): Promise<void> {\n    if (typeof navigator === 'undefined' || !navigator.bluetooth) {\n      throw this.unavailable('Web Bluetooth API not available in this browser.');\n    }\n    const isAvailable = await navigator.bluetooth.getAvailability();\n    if (!isAvailable) {\n      throw this.unavailable('No Bluetooth radio available.');\n    }\n  }\n\n  async isEnabled(): Promise<BooleanResult> {\n    // not available on web\n    return { value: true };\n  }\n\n  async enable(): Promise<void> {\n    throw this.unavailable('enable is not available on web.');\n  }\n\n  async disable(): Promise<void> {\n    throw this.unavailable('disable is not available on web.');\n  }\n\n  async startEnabledNotifications(): Promise<void> {\n    // not available on web\n  }\n\n  async stopEnabledNotifications(): Promise<void> {\n    // not available on web\n  }\n\n  async isLocationEnabled(): Promise<BooleanResult> {\n    throw this.unavailable('isLocationEnabled is not available on web.');\n  }\n\n  async openLocationSettings(): Promise<void> {\n    throw this.unavailable('openLocationSettings is not available on web.');\n  }\n\n  async openBluetoothSettings(): Promise<void> {\n    throw this.unavailable('openBluetoothSettings is not available on web.');\n  }\n\n  async openAppSettings(): Promise<void> {\n    throw this.unavailable('openAppSettings is not available on web.');\n  }\n\n  async setDisplayStrings(): Promise<void> {\n    // not available on web\n  }\n\n  async requestDevice(options?: RequestBleDeviceOptions): Promise<BleDevice> {\n    const filters = this.getFilters(options);\n    const device = await navigator.bluetooth.requestDevice({\n      filters: filters.length ? filters : undefined,\n      optionalServices: options?.optionalServices,\n      acceptAllDevices: filters.length === 0,\n    });\n    this.deviceMap.set(device.id, device);\n    const bleDevice = this.getBleDevice(device);\n    return bleDevice;\n  }\n\n  async requestLEScan(options?: RequestBleDeviceOptions): Promise<void> {\n    this.requestBleDeviceOptions = options;\n    const filters = this.getFilters(options);\n    await this.stopLEScan();\n    this.discoveredDevices = new Map<string, boolean>();\n    navigator.bluetooth.removeEventListener(\n      'advertisementreceived',\n      this.onAdvertisementReceivedCallback as EventListener\n    );\n    navigator.bluetooth.addEventListener('advertisementreceived', this.onAdvertisementReceivedCallback);\n    this.scan = await navigator.bluetooth.requestLEScan({\n      filters: filters.length ? filters : undefined,\n      acceptAllAdvertisements: filters.length === 0,\n      keepRepeatedDevices: options?.allowDuplicates,\n    });\n  }\n\n  private onAdvertisementReceivedCallback = this.onAdvertisementReceived.bind(this);\n\n  private onAdvertisementReceived(event: BluetoothAdvertisingEvent): void {\n    const deviceId = event.device.id;\n    this.deviceMap.set(deviceId, event.device);\n    const isNew = !this.discoveredDevices.has(deviceId);\n    if (isNew || this.requestBleDeviceOptions?.allowDuplicates) {\n      this.discoveredDevices.set(deviceId, true);\n      const device = this.getBleDevice(event.device);\n      const result: ScanResultInternal = {\n        device,\n        localName: device.name,\n        rssi: event.rssi,\n        txPower: event.txPower,\n        manufacturerData: mapToObject(event.manufacturerData),\n        serviceData: mapToObject(event.serviceData),\n        uuids: event.uuids?.map(webUUIDToString),\n      };\n      this.notifyListeners('onScanResult', result);\n    }\n  }\n\n  async stopLEScan(): Promise<void> {\n    if (this.scan?.active) {\n      this.scan.stop();\n    }\n    this.scan = null;\n  }\n\n  async getDevices(_options: GetDevicesOptions): Promise<GetDevicesResult> {\n    const devices = await navigator.bluetooth.getDevices();\n    const bleDevices = devices.map((device) => {\n      this.deviceMap.set(device.id, device);\n      const bleDevice = this.getBleDevice(device);\n      return bleDevice;\n    });\n    return { devices: bleDevices };\n  }\n\n  async getConnectedDevices(_options: GetConnectedDevicesOptions): Promise<GetDevicesResult> {\n    const devices = await navigator.bluetooth.getDevices();\n    const bleDevices = devices\n      .filter((device) => {\n        return device.gatt?.connected;\n      })\n      .map((device) => {\n        this.deviceMap.set(device.id, device);\n        const bleDevice = this.getBleDevice(device);\n        return bleDevice;\n      });\n    return { devices: bleDevices };\n  }\n\n  async connect(options: DeviceIdOptions & TimeoutOptions): Promise<void> {\n    const device = this.getDeviceFromMap(options.deviceId);\n    device.removeEventListener('gattserverdisconnected', this.onDisconnectedCallback);\n    device.addEventListener('gattserverdisconnected', this.onDisconnectedCallback);\n    const timeoutError = Symbol();\n    if (device.gatt === undefined) {\n      throw new Error('No gatt server available.');\n    }\n    try {\n      const timeout = options.timeout ?? this.DEFAULT_CONNECTION_TIMEOUT;\n      await runWithTimeout(device.gatt.connect(), timeout, timeoutError);\n    } catch (error) {\n      // cancel pending connect call, does not work yet in chromium because of a bug:\n      // https://bugs.chromium.org/p/chromium/issues/detail?id=684073\n      await device.gatt?.disconnect();\n      if (error === timeoutError) {\n        throw new Error('Connection timeout');\n      } else {\n        throw error;\n      }\n    }\n  }\n\n  private onDisconnectedCallback = this.onDisconnected.bind(this);\n\n  private onDisconnected(event: Event): void {\n    const deviceId = (event.target as BluetoothDevice).id;\n    const key = `disconnected|${deviceId}`;\n    this.notifyListeners(key, null);\n  }\n\n  async createBond(_options: DeviceIdOptions): Promise<void> {\n    throw this.unavailable('createBond is not available on web.');\n  }\n\n  async isBonded(_options: DeviceIdOptions): Promise<BooleanResult> {\n    throw this.unavailable('isBonded is not available on web.');\n  }\n\n  async disconnect(options: DeviceIdOptions): Promise<void> {\n    this.getDeviceFromMap(options.deviceId).gatt?.disconnect();\n  }\n\n  async getServices(options: DeviceIdOptions): Promise<BleServices> {\n    const services = (await this.getDeviceFromMap(options.deviceId).gatt?.getPrimaryServices()) ?? [];\n    const bleServices: BleService[] = [];\n    for (const service of services) {\n      const characteristics = await service.getCharacteristics();\n      const bleCharacteristics: BleCharacteristic[] = [];\n      for (const characteristic of characteristics) {\n        bleCharacteristics.push({\n          uuid: characteristic.uuid,\n          properties: this.getProperties(characteristic),\n          descriptors: await this.getDescriptors(characteristic),\n        });\n      }\n      bleServices.push({ uuid: service.uuid, characteristics: bleCharacteristics });\n    }\n    return { services: bleServices };\n  }\n\n  private async getDescriptors(characteristic: BluetoothRemoteGATTCharacteristic): Promise<BleDescriptor[]> {\n    try {\n      const descriptors = await characteristic.getDescriptors();\n      return descriptors.map((descriptor) => ({\n        uuid: descriptor.uuid,\n      }));\n    } catch {\n      return [];\n    }\n  }\n\n  private getProperties(characteristic: BluetoothRemoteGATTCharacteristic): BleCharacteristicProperties {\n    return {\n      broadcast: characteristic.properties.broadcast,\n      read: characteristic.properties.read,\n      writeWithoutResponse: characteristic.properties.writeWithoutResponse,\n      write: characteristic.properties.write,\n      notify: characteristic.properties.notify,\n      indicate: characteristic.properties.indicate,\n      authenticatedSignedWrites: characteristic.properties.authenticatedSignedWrites,\n      reliableWrite: characteristic.properties.reliableWrite,\n      writableAuxiliaries: characteristic.properties.writableAuxiliaries,\n    };\n  }\n\n  private async getCharacteristic(\n    options: ReadOptions | WriteOptions\n  ): Promise<BluetoothRemoteGATTCharacteristic | undefined> {\n    const service = await this.getDeviceFromMap(options.deviceId).gatt?.getPrimaryService(options?.service);\n    return service?.getCharacteristic(options?.characteristic);\n  }\n\n  private async getDescriptor(\n    options: ReadDescriptorOptions | WriteDescriptorOptions\n  ): Promise<BluetoothRemoteGATTDescriptor | undefined> {\n    const characteristic = await this.getCharacteristic(options);\n    return characteristic?.getDescriptor(options?.descriptor);\n  }\n\n  async discoverServices(_options: DeviceIdOptions): Promise<void> {\n    throw this.unavailable('discoverServices is not available on web.');\n  }\n\n  async getMtu(_options: DeviceIdOptions): Promise<GetMtuResult> {\n    throw this.unavailable('getMtu is not available on web.');\n  }\n\n  async requestConnectionPriority(_options: RequestConnectionPriorityOptions): Promise<void> {\n    throw this.unavailable('requestConnectionPriority is not available on web.');\n  }\n\n  async readRssi(_options: DeviceIdOptions): Promise<ReadRssiResult> {\n    throw this.unavailable('readRssi is not available on web.');\n  }\n\n  async read(options: ReadOptions): Promise<ReadResult> {\n    const characteristic = await this.getCharacteristic(options);\n    const value = await characteristic?.readValue();\n    return { value };\n  }\n\n  async write(options: WriteOptions): Promise<void> {\n    const characteristic = await this.getCharacteristic(options);\n    let dataView: DataView;\n    if (typeof options.value === 'string') {\n      dataView = hexStringToDataView(options.value);\n    } else {\n      dataView = options.value;\n    }\n    await characteristic?.writeValueWithResponse(dataView);\n  }\n\n  async writeWithoutResponse(options: WriteOptions): Promise<void> {\n    const characteristic = await this.getCharacteristic(options);\n    let dataView: DataView;\n    if (typeof options.value === 'string') {\n      dataView = hexStringToDataView(options.value);\n    } else {\n      dataView = options.value;\n    }\n    await characteristic?.writeValueWithoutResponse(dataView);\n  }\n\n  async readDescriptor(options: ReadDescriptorOptions): Promise<ReadResult> {\n    const descriptor = await this.getDescriptor(options);\n    const value = await descriptor?.readValue();\n    return { value };\n  }\n\n  async writeDescriptor(options: WriteDescriptorOptions): Promise<void> {\n    const descriptor = await this.getDescriptor(options);\n    let dataView: DataView;\n    if (typeof options.value === 'string') {\n      dataView = hexStringToDataView(options.value);\n    } else {\n      dataView = options.value;\n    }\n    await descriptor?.writeValue(dataView);\n  }\n\n  async startNotifications(options: ReadOptions): Promise<void> {\n    const characteristic = await this.getCharacteristic(options);\n    characteristic?.removeEventListener('characteristicvaluechanged', this.onCharacteristicValueChangedCallback);\n    characteristic?.addEventListener('characteristicvaluechanged', this.onCharacteristicValueChangedCallback);\n    await characteristic?.startNotifications();\n  }\n\n  private onCharacteristicValueChangedCallback = this.onCharacteristicValueChanged.bind(this);\n\n  private onCharacteristicValueChanged(event: Event): void {\n    const characteristic = event.target as BluetoothRemoteGATTCharacteristic;\n    const key = `notification|${characteristic.service?.device.id}|${characteristic.service?.uuid}|${characteristic.uuid}`;\n    this.notifyListeners(key, {\n      value: characteristic.value,\n    });\n  }\n\n  async stopNotifications(options: ReadOptions): Promise<void> {\n    const characteristic = await this.getCharacteristic(options);\n    await characteristic?.stopNotifications();\n  }\n\n  private getFilters(options?: RequestBleDeviceOptions): BluetoothLEScanFilter[] {\n    const filters: BluetoothLEScanFilter[] = [];\n    for (const service of options?.services ?? []) {\n      filters.push({\n        services: [service],\n        name: options?.name,\n        namePrefix: options?.namePrefix,\n      });\n    }\n    if ((options?.name || options?.namePrefix) && filters.length === 0) {\n      filters.push({\n        name: options.name,\n        namePrefix: options.namePrefix,\n      });\n    }\n    return filters;\n  }\n\n  private getDeviceFromMap(deviceId: string): BluetoothDevice {\n    const device = this.deviceMap.get(deviceId);\n    if (device === undefined) {\n      throw new Error('Device not found. Call \"requestDevice\", \"requestLEScan\" or \"getDevices\" first.');\n    }\n    return device;\n  }\n\n  private getBleDevice(device: BluetoothDevice): BleDevice {\n    const bleDevice: BleDevice = {\n      deviceId: device.id,\n      // use undefined instead of null if name is not available\n      name: device.name ?? undefined,\n    };\n    return bleDevice;\n  }\n}\n","export async function runWithTimeout(promise: Promise<unknown>, time: number, exception: symbol): Promise<unknown> {\n  let timer: ReturnType<typeof setTimeout>;\n  return Promise.race([\n    promise,\n    new Promise((_, reject) => {\n      timer = setTimeout(() => reject(exception), time);\n    }),\n  ]).finally(() => clearTimeout(timer));\n}\n"],"names":["BluetoothLeWeb","WebPlugin","constructor","deviceMap","Map","discoveredDevices","scan","DEFAULT_CONNECTION_TIMEOUT","onAdvertisementReceivedCallback","this","onAdvertisementReceived","bind","onDisconnectedCallback","onDisconnected","onCharacteristicValueChangedCallback","onCharacteristicValueChanged","initialize","navigator","bluetooth","unavailable","getAvailability","isEnabled","value","enable","disable","startEnabledNotifications","stopEnabledNotifications","isLocationEnabled","openLocationSettings","openBluetoothSettings","openAppSettings","setDisplayStrings","requestDevice","options","filters","getFilters","device","length","undefined","optionalServices","acceptAllDevices","set","id","getBleDevice","requestLEScan","requestBleDeviceOptions","stopLEScan","removeEventListener","addEventListener","acceptAllAdvertisements","keepRepeatedDevices","allowDuplicates","event","deviceId","has","_a","result","localName","name","rssi","txPower","manufacturerData","mapToObject","serviceData","uuids","_b","map","webUUIDToString","notifyListeners","active","stop","getDevices","_options","devices","getConnectedDevices","filter","gatt","connected","connect","getDeviceFromMap","timeoutError","Symbol","Error","timeout","async","promise","time","exception","timer","Promise","race","_","reject","setTimeout","finally","clearTimeout","runWithTimeout","error","disconnect","target","key","concat","createBond","isBonded","getServices","services","getPrimaryServices","bleServices","service","characteristics","getCharacteristics","bleCharacteristics","characteristic","push","uuid","properties","getProperties","descriptors","getDescriptors","descriptor","broadcast","read","writeWithoutResponse","write","notify","indicate","authenticatedSignedWrites","reliableWrite","writableAuxiliaries","getCharacteristic","getPrimaryService","getDescriptor","discoverServices","getMtu","requestConnectionPriority","readRssi","readValue","dataView","hexStringToDataView","writeValueWithResponse","writeValueWithoutResponse","readDescriptor","writeDescriptor","writeValue","startNotifications","stopNotifications","namePrefix","get"],"sourceRoot":""}