{"version":3,"file":"static/js/3665.e1f2085c.chunk.js","mappings":"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","sources":["../node_modules/@capacitor-community/bluetooth-le/src/timeout.ts","../node_modules/@capacitor-community/bluetooth-le/src/web.ts"],"sourcesContent":["export async function runWithTimeout(promise: Promise<unknown>, time: number, exception: symbol): Promise<unknown> {\n  let timer: ReturnType<typeof setTimeout>;\n  return Promise.race([\n    promise,\n    new Promise((_, reject) => {\n      timer = setTimeout(() => reject(exception), time);\n    }),\n  ]).finally(() => clearTimeout(timer));\n}\n","import { WebPlugin } from '@capacitor/core';\n\nimport { hexStringToDataView, mapToObject, webUUIDToString } from './conversion';\nimport type {\n  BleCharacteristic,\n  BleCharacteristicProperties,\n  BleDescriptor,\n  BleService,\n  TimeoutOptions,\n  BleDevice,\n  BleServices,\n  BluetoothLePlugin,\n  BooleanResult,\n  DeviceIdOptions,\n  GetConnectedDevicesOptions,\n  GetDevicesOptions,\n  GetDevicesResult,\n  ReadDescriptorOptions,\n  ReadOptions,\n  ReadResult,\n  ReadRssiResult,\n  RequestBleDeviceOptions,\n  ScanResultInternal,\n  WriteOptions,\n  WriteDescriptorOptions,\n} from './definitions';\nimport { runWithTimeout } from './timeout';\n\nexport class BluetoothLeWeb extends WebPlugin implements BluetoothLePlugin {\n  private deviceMap = new Map<string, BluetoothDevice>();\n  private discoveredDevices = new Map<string, boolean>();\n  private scan: BluetoothLEScan | null = null;\n  private requestBleDeviceOptions: RequestBleDeviceOptions | undefined;\n  private DEFAULT_CONNECTION_TIMEOUT = 10000;\n\n  async initialize(): Promise<void> {\n    if (typeof navigator === 'undefined' || !navigator.bluetooth) {\n      throw this.unavailable('Web Bluetooth API not available in this browser.');\n    }\n    const isAvailable = await navigator.bluetooth.getAvailability();\n    if (!isAvailable) {\n      throw this.unavailable('No Bluetooth radio available.');\n    }\n  }\n\n  async isEnabled(): Promise<BooleanResult> {\n    // not available on web\n    return { value: true };\n  }\n\n  async enable(): Promise<void> {\n    throw this.unavailable('enable is not available on web.');\n  }\n\n  async disable(): Promise<void> {\n    throw this.unavailable('disable is not available on web.');\n  }\n\n  async startEnabledNotifications(): Promise<void> {\n    // not available on web\n  }\n\n  async stopEnabledNotifications(): Promise<void> {\n    // not available on web\n  }\n\n  async isLocationEnabled(): Promise<BooleanResult> {\n    throw this.unavailable('isLocationEnabled is not available on web.');\n  }\n\n  async openLocationSettings(): Promise<void> {\n    throw this.unavailable('openLocationSettings is not available on web.');\n  }\n\n  async openBluetoothSettings(): Promise<void> {\n    throw this.unavailable('openBluetoothSettings is not available on web.');\n  }\n\n  async openAppSettings(): Promise<void> {\n    throw this.unavailable('openAppSettings is not available on web.');\n  }\n\n  async setDisplayStrings(): Promise<void> {\n    // not available on web\n  }\n\n  async requestDevice(options?: RequestBleDeviceOptions): Promise<BleDevice> {\n    const filters = this.getFilters(options);\n    const device = await navigator.bluetooth.requestDevice({\n      filters: filters.length ? filters : undefined,\n      optionalServices: options?.optionalServices,\n      acceptAllDevices: filters.length === 0,\n    });\n    this.deviceMap.set(device.id, device);\n    const bleDevice = this.getBleDevice(device);\n    return bleDevice;\n  }\n\n  async requestLEScan(options?: RequestBleDeviceOptions): Promise<void> {\n    this.requestBleDeviceOptions = options;\n    const filters = this.getFilters(options);\n    await this.stopLEScan();\n    this.discoveredDevices = new Map<string, boolean>();\n    navigator.bluetooth.removeEventListener(\n      'advertisementreceived',\n      this.onAdvertisementReceivedCallback as EventListener\n    );\n    navigator.bluetooth.addEventListener('advertisementreceived', this.onAdvertisementReceivedCallback);\n    this.scan = await navigator.bluetooth.requestLEScan({\n      filters: filters.length ? filters : undefined,\n      acceptAllAdvertisements: filters.length === 0,\n      keepRepeatedDevices: options?.allowDuplicates,\n    });\n  }\n\n  private onAdvertisementReceivedCallback = this.onAdvertisementReceived.bind(this);\n\n  private onAdvertisementReceived(event: BluetoothAdvertisingEvent): void {\n    const deviceId = event.device.id;\n    this.deviceMap.set(deviceId, event.device);\n    const isNew = !this.discoveredDevices.has(deviceId);\n    if (isNew || this.requestBleDeviceOptions?.allowDuplicates) {\n      this.discoveredDevices.set(deviceId, true);\n      const device = this.getBleDevice(event.device);\n      const result: ScanResultInternal = {\n        device,\n        localName: device.name,\n        rssi: event.rssi,\n        txPower: event.txPower,\n        manufacturerData: mapToObject(event.manufacturerData),\n        serviceData: mapToObject(event.serviceData),\n        uuids: event.uuids?.map(webUUIDToString),\n      };\n      this.notifyListeners('onScanResult', result);\n    }\n  }\n\n  async stopLEScan(): Promise<void> {\n    if (this.scan?.active) {\n      this.scan.stop();\n    }\n    this.scan = null;\n  }\n\n  async getDevices(_options: GetDevicesOptions): Promise<GetDevicesResult> {\n    const devices = await navigator.bluetooth.getDevices();\n    const bleDevices = devices.map((device) => {\n      this.deviceMap.set(device.id, device);\n      const bleDevice = this.getBleDevice(device);\n      return bleDevice;\n    });\n    return { devices: bleDevices };\n  }\n\n  async getConnectedDevices(_options: GetConnectedDevicesOptions): Promise<GetDevicesResult> {\n    const devices = await navigator.bluetooth.getDevices();\n    const bleDevices = devices\n      .filter((device) => {\n        return device.gatt?.connected;\n      })\n      .map((device) => {\n        this.deviceMap.set(device.id, device);\n        const bleDevice = this.getBleDevice(device);\n        return bleDevice;\n      });\n    return { devices: bleDevices };\n  }\n\n  async connect(options: DeviceIdOptions & TimeoutOptions): Promise<void> {\n    const device = this.getDeviceFromMap(options.deviceId);\n    device.removeEventListener('gattserverdisconnected', this.onDisconnectedCallback);\n    device.addEventListener('gattserverdisconnected', this.onDisconnectedCallback);\n    const timeoutError = Symbol();\n    if (device.gatt === undefined) {\n      throw new Error('No gatt server available.');\n    }\n    try {\n      const timeout = options.timeout ?? this.DEFAULT_CONNECTION_TIMEOUT;\n      await runWithTimeout(device.gatt.connect(), timeout, timeoutError);\n    } catch (error) {\n      // cancel pending connect call, does not work yet in chromium because of a bug:\n      // https://bugs.chromium.org/p/chromium/issues/detail?id=684073\n      await device.gatt?.disconnect();\n      if (error === timeoutError) {\n        throw new Error('Connection timeout');\n      } else {\n        throw error;\n      }\n    }\n  }\n\n  private onDisconnectedCallback = this.onDisconnected.bind(this);\n\n  private onDisconnected(event: Event): void {\n    const deviceId = (event.target as BluetoothDevice).id;\n    const key = `disconnected|${deviceId}`;\n    this.notifyListeners(key, null);\n  }\n\n  async createBond(_options: DeviceIdOptions): Promise<void> {\n    throw this.unavailable('createBond is not available on web.');\n  }\n\n  async isBonded(_options: DeviceIdOptions): Promise<BooleanResult> {\n    throw this.unavailable('isBonded is not available on web.');\n  }\n\n  async disconnect(options: DeviceIdOptions): Promise<void> {\n    this.getDeviceFromMap(options.deviceId).gatt?.disconnect();\n  }\n\n  async getServices(options: DeviceIdOptions): Promise<BleServices> {\n    const services = (await this.getDeviceFromMap(options.deviceId).gatt?.getPrimaryServices()) ?? [];\n    const bleServices: BleService[] = [];\n    for (const service of services) {\n      const characteristics = await service.getCharacteristics();\n      const bleCharacteristics: BleCharacteristic[] = [];\n      for (const characteristic of characteristics) {\n        bleCharacteristics.push({\n          uuid: characteristic.uuid,\n          properties: this.getProperties(characteristic),\n          descriptors: await this.getDescriptors(characteristic),\n        });\n      }\n      bleServices.push({ uuid: service.uuid, characteristics: bleCharacteristics });\n    }\n    return { services: bleServices };\n  }\n\n  private async getDescriptors(characteristic: BluetoothRemoteGATTCharacteristic): Promise<BleDescriptor[]> {\n    try {\n      const descriptors = await characteristic.getDescriptors();\n      return descriptors.map((descriptor) => ({\n        uuid: descriptor.uuid,\n      }));\n    } catch {\n      return [];\n    }\n  }\n\n  private getProperties(characteristic: BluetoothRemoteGATTCharacteristic): BleCharacteristicProperties {\n    return {\n      broadcast: characteristic.properties.broadcast,\n      read: characteristic.properties.read,\n      writeWithoutResponse: characteristic.properties.writeWithoutResponse,\n      write: characteristic.properties.write,\n      notify: characteristic.properties.notify,\n      indicate: characteristic.properties.indicate,\n      authenticatedSignedWrites: characteristic.properties.authenticatedSignedWrites,\n      reliableWrite: characteristic.properties.reliableWrite,\n      writableAuxiliaries: characteristic.properties.writableAuxiliaries,\n    };\n  }\n\n  private async getCharacteristic(\n    options: ReadOptions | WriteOptions\n  ): Promise<BluetoothRemoteGATTCharacteristic | undefined> {\n    const service = await this.getDeviceFromMap(options.deviceId).gatt?.getPrimaryService(options?.service);\n    return service?.getCharacteristic(options?.characteristic);\n  }\n\n  private async getDescriptor(\n    options: ReadDescriptorOptions | WriteDescriptorOptions\n  ): Promise<BluetoothRemoteGATTDescriptor | undefined> {\n    const characteristic = await this.getCharacteristic(options);\n    return characteristic?.getDescriptor(options?.descriptor);\n  }\n\n  async discoverServices(_options: DeviceIdOptions): Promise<void> {\n    throw this.unavailable('discoverServices is not available on web.');\n  }\n\n  async readRssi(_options: DeviceIdOptions): Promise<ReadRssiResult> {\n    throw this.unavailable('readRssi is not available on web.');\n  }\n\n  async read(options: ReadOptions): Promise<ReadResult> {\n    const characteristic = await this.getCharacteristic(options);\n    const value = await characteristic?.readValue();\n    return { value };\n  }\n\n  async write(options: WriteOptions): Promise<void> {\n    const characteristic = await this.getCharacteristic(options);\n    let dataView: DataView;\n    if (typeof options.value === 'string') {\n      dataView = hexStringToDataView(options.value);\n    } else {\n      dataView = options.value;\n    }\n    await characteristic?.writeValueWithResponse(dataView);\n  }\n\n  async writeWithoutResponse(options: WriteOptions): Promise<void> {\n    const characteristic = await this.getCharacteristic(options);\n    let dataView: DataView;\n    if (typeof options.value === 'string') {\n      dataView = hexStringToDataView(options.value);\n    } else {\n      dataView = options.value;\n    }\n    await characteristic?.writeValueWithoutResponse(dataView);\n  }\n\n  async readDescriptor(options: ReadDescriptorOptions): Promise<ReadResult> {\n    const descriptor = await this.getDescriptor(options);\n    const value = await descriptor?.readValue();\n    return { value };\n  }\n\n  async writeDescriptor(options: WriteDescriptorOptions): Promise<void> {\n    const descriptor = await this.getDescriptor(options);\n    let dataView: DataView;\n    if (typeof options.value === 'string') {\n      dataView = hexStringToDataView(options.value);\n    } else {\n      dataView = options.value;\n    }\n    await descriptor?.writeValue(dataView);\n  }\n\n  async startNotifications(options: ReadOptions): Promise<void> {\n    const characteristic = await this.getCharacteristic(options);\n    characteristic?.removeEventListener('characteristicvaluechanged', this.onCharacteristicValueChangedCallback);\n    characteristic?.addEventListener('characteristicvaluechanged', this.onCharacteristicValueChangedCallback);\n    await characteristic?.startNotifications();\n  }\n\n  private onCharacteristicValueChangedCallback = this.onCharacteristicValueChanged.bind(this);\n\n  private onCharacteristicValueChanged(event: Event): void {\n    const characteristic = event.target as BluetoothRemoteGATTCharacteristic;\n    const key = `notification|${characteristic.service?.device.id}|${characteristic.service?.uuid}|${characteristic.uuid}`;\n    this.notifyListeners(key, {\n      value: characteristic.value,\n    });\n  }\n\n  async stopNotifications(options: ReadOptions): Promise<void> {\n    const characteristic = await this.getCharacteristic(options);\n    await characteristic?.stopNotifications();\n  }\n\n  private getFilters(options?: RequestBleDeviceOptions): BluetoothLEScanFilter[] {\n    const filters: BluetoothLEScanFilter[] = [];\n    for (const service of options?.services ?? []) {\n      filters.push({\n        services: [service],\n        name: options?.name,\n        namePrefix: options?.namePrefix,\n      });\n    }\n    if ((options?.name || options?.namePrefix) && filters.length === 0) {\n      filters.push({\n        name: options.name,\n        namePrefix: options.namePrefix,\n      });\n    }\n    return filters;\n  }\n\n  private getDeviceFromMap(deviceId: string): BluetoothDevice {\n    const device = this.deviceMap.get(deviceId);\n    if (device === undefined) {\n      throw new Error('Device not found. Call \"requestDevice\", \"requestLEScan\" or \"getDevices\" first.');\n    }\n    return device;\n  }\n\n  private getBleDevice(device: BluetoothDevice): BleDevice {\n    const bleDevice: BleDevice = {\n      deviceId: device.id,\n      // use undefined instead of null if name is not available\n      name: device.name ?? undefined,\n    };\n    return bleDevice;\n  }\n}\n"],"names":["runWithTimeout","promise","time","exception","Promise","race","_","reject","timer","setTimeout","finally","clearTimeout","BluetoothLeWeb","deviceMap","Map","discoveredDevices","scan","DEFAULT_CONNECTION_TIMEOUT","onAdvertisementReceivedCallback","onAdvertisementReceived","bind","onDisconnectedCallback","onDisconnected","onCharacteristicValueChangedCallback","onCharacteristicValueChanged","navigator","bluetooth","this","unavailable","getAvailability","value","options","filters","getFilters","requestDevice","length","undefined","optionalServices","acceptAllDevices","device","set","id","bleDevice","getBleDevice","requestBleDeviceOptions","stopLEScan","removeEventListener","addEventListener","requestLEScan","acceptAllAdvertisements","keepRepeatedDevices","allowDuplicates","event","deviceId","has","result","localName","name","rssi","txPower","manufacturerData","mapToObject","serviceData","uuids","map","webUUIDToString","notifyListeners","active","stop","_options","getDevices","devices","bleDevices","filter","gatt","connected","getDeviceFromMap","timeoutError","Symbol","Error","timeout","connect","disconnect","target","key","getPrimaryServices","_b","services","bleServices","service","getCharacteristics","characteristics","bleCharacteristics","characteristic","uuid","getProperties","getDescriptors","properties","descriptors","push","descriptor","broadcast","read","writeWithoutResponse","write","notify","indicate","authenticatedSignedWrites","reliableWrite","writableAuxiliaries","getPrimaryService","getCharacteristic","getDescriptor","readValue","dataView","hexStringToDataView","writeValueWithResponse","writeValueWithoutResponse","writeValue","startNotifications","stopNotifications","namePrefix","get","WebPlugin"],"sourceRoot":""}